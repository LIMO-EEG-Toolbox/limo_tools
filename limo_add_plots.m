function limo_add_plots(varargin)

% interactive ploting function for data generated by
% limo_central_tendency_and_ci, limo_plot_difference or any data in
% 4D with dim channels * frames * conditions * 3 with this last dim being
% the low end of the confidence interval, the estimator (like eg mean),
% high end of the confidence interval.
%
% FORMAT limo_add_plots % calls the GUI
%        limo_add_plots({myfiles})
%        limo_add_plots({myfiles},LIMOfile)
%        limo_add_plots({myfiles},LIMOfile,key,value)
%
% INPUTS myfiles is a cell array of .mat files to plot
%        LIMOfile is the LIMO file with the corresponding metadata (optional but recommended)
%        options are defined by key value pairs
%        'channel' with a index of the channel to plot
%        'restrict' either 'Time' or 'Frequency' for Time-Frequency data
%        'dimvalue' value for reduced dimension when using Time-Frequency data
%            e.g. 'Channel',49,'restrict','Time','dimvalue',5 will plot data at channel 49 in time at 5Hz
%        'variable' with the value to indicate the variable to plot for arrays of many variables
%        'mask' the signifcant frames to flag (ie red dots at the bottom of the figure)
%        'figure'   'new' (default) or 'hold' to plot in existing figure
%
% ------------------------------
%  Copyright (C) LIMO Team 2021

%% supported type
options    = {'mean','trimmed_mean','median','Harrell_Davis','diff','data'};

%% check inputs
out      = 0;
turn     = 1;
infile   = [];
channel  = [];
restrict = [];
dimvalue = [];
mask     = [];
fig      = 'new';
warning  on

if ~isempty(varargin)
    for i=1:size(varargin,2)
        if ischar(varargin{i})
            if strcmpi(varargin{i},'channel')
                channel = varargin{i+1};
            elseif strcmpi(varargin{i},'restrict') % for Time-Frequency
                restrict  = varargin{i+1};
            elseif strcmpi(varargin{i},'dimvalue') % for Time-Frequency
                dimvalue  =  varargin{i+1};
            elseif strcmpi(varargin{i},'variable') % for arrays of many variables
                v  = varargin{i+1};
            elseif strcmpi(varargin{i},'mask') % for arrays of many variables
                mask  = varargin{i+1};
            elseif strcmpi(varargin{i},'figure') % for arrays of many variables
                fig  = varargin{i+1};
            elseif contains(varargin{i},'LIMO.mat')
                LIMO  = varargin{i};
            end
        elseif iscell(varargin{i})
            infile = varargin{i};
        elseif isstruct(varargin{i})
            LIMO = varargin{i}; % LIMO.mat structure passed directly
        end
    end
end

% ERSP hack
if length(infile) == 1 && ...
        ~isempty(restrict) && length(dimvalue) > 1
    infile = repmat(infile,[1,length(dimvalue)]);
end

previous_file = [];
while out == 0
    subjects_plot = 0;

    %% Data selection

    if ~isempty(infile) % allows comand line plot
        if turn <= length(infile)
            if isempty(infile{turn})
                [file,path,index]=uigetfile('*mat',['Select Central tendency file n:' num2str(turn) '']);
                file = fullfile(path,file); previous_file = file;
                if strcmp(file,previous_file) % reselect same file = want to plot a new channel
                    channel = [];
                end
                infile = [];
            else
                file = infile{turn};
                index = 1;
            end
        else
            return
        end
    else
        [file,path,index]=uigetfile('*mat',['Select Central tendency file n:' num2str(turn) '']);
        file = fullfile(path,file); previous_file = file;
        if strcmp(file,previous_file) % reselect same file = want to plot a new channel
            channel = [];
        end
    end

    if index == 0
        out = 1; Data = []; tmp = [];
    else
        data       = load(file);
        data       = data.(cell2mat(fieldnames(data)));
        if ~isstruct(data)
            limo_errordlg('limo add plots input(s) must be structures from limo_central_tendency_and_ci.m and limo_plot_difference.m')
            return
        end
        datatype   = fieldnames(data);
        datatype   = datatype(cellfun(@(x) strcmp(x,'limo'), fieldnames(data))==0);
        if sum(strcmpi(datatype,options)) == 0
            limo_errordlg('unknown file to plot');
            return
        end
        name{turn} = cell2mat(datatype); %#ok<AGROW>
        tmp        = data.(cell2mat(datatype));

        % overwrite metadata if LIMO file provided
        if exist('LIMO','var')
            if isstruct(LIMO)
                if ~isfield(LIMO,'data') &&  exist(fullfile(pwd,'LIMO.mat'),'File')
                    LIMO = load('LIMO.mat');
                    LIMO = LIMO.LIMO;
                end
            elseif ischar(LIMO)
                LIMO = load(LIMO);
                LIMO = LIMO.LIMO;
            end
            F    = fieldnames(LIMO);
            for f=1:length(F)
                data.limo.(cell2mat((F(f)))) = LIMO.(cell2mat((F(f))));
            end
            clear LIMO
        elseif ~isfield(data,'limo')
            [limofile,locpath]=uigetfile({'LIMO.mat'},'Select any LIMO with right info');
            if strcmpi(limofile,'LIMO.mat')
                LIMO      = load(fullfile(locpath,limofile));
                data.limo = LIMO.LIMO; clear LIMO;
                save(fullfile(path,file),'data')
            else
                limo_warndlg('selection aborded');
                return
            end
        end

        % reduce dimension for time frequency
        if strcmpi(data.limo.Analysis,'Time-Frequency')
            if ~isempty(dimvalue)
                tmp = squeeze(tmp); % only 1 variable
                if length(dimvalue) == 1
                    if turn == 1 % freq or time index always the same since dimvalue == 1
                        [~,~,freq,time] = limo_display_reducedim(tmp,data.limo,channel,restrict,dimvalue);
                    end
                else
                    tmp_dimvalue = dimvalue(turn); % freq or time index needs to be updated
                    [~,~,freq,time] = limo_display_reducedim(tmp,data.limo,channel,restrict,tmp_dimvalue);
                end
            else
                if ~isfield(data.limo,'data')
                    if ~exist('LIMO','var')
                        [Name,Path,go] = uigetfile('LIMO.mat','Data information needed, select a relevant LIMO file');
                        if go == 1 && strcmpi(Name,'LIMO.mat')
                            LIMO = load(fullfile(Path,'LIMO.mat')); LIMO = LIMO.LIMO;
                            data.limo.data = LIMO.data; data.limo.dir = fileparts(file);
                            save(file,'data');
                        else
                            disp('selection aborded'); return
                        end
                    else
                        data.limo.data = LIMO.data; data.limo.dir = fileparts(file);
                        save(file,'data');
                    end
                end
                [~,channel,freq,time] = limo_display_reducedim(tmp,data.limo,channel,restrict,dimvalue);
                if length(time) == 1
                    restrict = 'frequency';
                else
                    restrict = 'time';
                end
            end
            tmp = squeeze(tmp(:,freq,time,:));
        end

        % the last dim of data.data can be the number of subjects or the trials
        % sorted by their weights - use file name to know which estimator was used
        if isfield(data,'data')
            if contains(file, 'Mean','IgnoreCase',true)
                name{turn} = 'Subjects'' Means'; %#ok<AGROW>
            elseif contains(file, 'Trimmed mean','IgnoreCase',true)
                name{turn} = 'Subjects'' Trimmed Means'; %#ok<AGROW>
            elseif contains(file, 'HD','IgnoreCase',true)
                name{turn} = 'Subjects'' Mid Deciles HD'; %#ok<AGROW>
            elseif contains(file, 'Median','IgnoreCase',true)
                name{turn} = 'Subjects'' Medians'; %#ok<AGROW>
            else
                if strcmpi(file,'subjects_weighted_data.mat')
                    name{turn} = 'Data plotted per weight'; %#ok<AGROW>
                else
                    underscores = strfind(file, '_');
                    if ~isempty(underscores)
                        file(underscores) = ' ';
                    end
                    ext = strfind(file, '.');
                    file(max(ext):end) = [];
                    name{turn} = file; %#ok<AGROW>
                end
            end
            subjects_plot = 1;
        end
    end

    % store each iteration into Data
    if ~isempty(tmp)
        if strcmpi('diff',datatype)
            if size(tmp,1) == 1
                if ndims(tmp) == 4
                    Data = nan(1,size(tmp,2),size(tmp,3),size(tmp,4));
                    Data(1,:,:,:) = squeeze(tmp);
                else
                    Data = nan(1,size(tmp,2),size(tmp,3));
                    Data(1,:,:) = squeeze(tmp);
                end
            else
                Data        = squeeze(tmp);
            end
        else
            if size(tmp,1) == 1 && size(tmp,3) == 1 % only 1 channel and 1 variable not squeezed yet
                D           = squeeze(tmp(:,:,1,:));
                Data        = nan(1,size(tmp,2),size(tmp,4));
                Data(1,:,:) = D; clear D;
            elseif size(tmp,1) > 1 && size(tmp,3) == 1 && subjects_plot==0 % only 1 variable not squeezed yet
                Data        = squeeze(tmp(:,:,1,:));
            elseif size(tmp,1) > 1 && size(tmp,3) == 3
                Data        = tmp;
            else % many subjects for instance
                if ~exist('v','var')
                    if isfield(data.limo,'PlotRank')
                        v = cell2mat(inputdlg(['which decile to plot, 1 to ' num2str(size(tmp,4)-1)],'plotting option'));
                    else
                        if size(tmp,3) == 1
                            v = 1;
                        else
                            v = cell2mat(inputdlg(['which variable to plot, 1 to ' num2str(size(tmp,3))],'plotting option'));
                        end
                    end

                    if isempty(v)
                        out = 1;
                    elseif ischar(v)
                        v = eval(v);
                    end
                end

                if  subjects_plot == 0 && length(v)>1
                    limo_errordlg('only 1 parameter value expected');
                    return
                else
                    if size(tmp,1) == 1 && size(tmp,3) > 1
                        D           = squeeze(tmp(:,:,v,:));
                        Data        = nan(1,size(tmp,2),size(tmp,4));
                        Data(1,:,:) = D; clear D;
                    else
                        Data        = squeeze(tmp(:,:,v,:));
                    end
                end
            end
        end
        clear tmp
    end

    %% channel(s) to plot
    % --------------------
    if ~isempty(Data)
        if size(Data,1) == 1
            Data = squeeze(Data(1,:,:));
        else
            if isempty(channel)
                channel = inputdlg(['which channel to plot 1 to' num2str(size(Data,1))],'channel choice');
                if isempty(channel) % user presed cancel
                    disp('plot aborded');
                    return
                end
            end

            if strcmp(channel,'')
                if ndims(Data)==2 %#ok<ISMAT>
                    tmp = Data;
                else
                    tmp = Data(:,:,2);
                end
                if sum(isnan(tmp(:))) == numel(tmp)
                    limo_errordlg('the data file appears empty (only NaNs)');
                    return
                else
                    if abs(max(tmp(:))) > abs(min(tmp(:)))
                        [channel,~,~] = ind2sub(size(tmp),find(tmp==max(tmp(:))));
                    else
                        [channel,~,~] = ind2sub(size(tmp),find(tmp==min(tmp(:))));
                    end
                    if length(channel) ~= 1; channel = channel(1); end
                    Data = squeeze(Data(channel,:,:)); fprintf('ploting channel %g\n',channel)
                end
            else
                if iscell(channel)
                    channel = eval(cell2mat(channel));
                end

                if ndims(Data)==2 %#ok<ISMAT>
                    Data = squeeze(Data(channel,:));
                else
                    Data = squeeze(Data(channel,:,:));
                end
            end
        end

        %% get additional info for plotting
        % ---------------------------------
        if turn == 1

            %% get stat info
            if isempty(mask)
                res = limo_questdlg('Associate stat file','mark significant points','  yes  ','  no  ','  yes  ');
                if strcmpi(res,'  yes  ')
                    [StatFile,StatPath] = limo_get_files(1,'*mat','select stat file');
                    if exist(fullfile(cell2mat(StatPath),'LIMO.mat'),'file')
                        stat_limo = load(fullfile(cell2mat(StatPath),'LIMO.mat'));
                        if stat_limo.LIMO.design.bootstrap ~= 0
                            MCC = 2; %% ideally ask user, could be 1,2,3,4
                        else
                            MCC = 1;
                        end
                        [~,mask] = limo_stat_values(cell2mat(StatFile),.05,MCC,stat_limo.LIMO);
                        if strcmpi(data.limo.Analysis,'Time-Frequency')
                            mask = squeeze(mask(channel,freq,time,:));
                        else
                            mask = squeeze(mask(channel,:));
                        end
                        mask(mask~=0)=1; mask(mask==0)=NaN;
                    else
                        limo_errordlg('no LIMO file seem associated to this stat file, skipping it')
                    end
                end
            else
                if size(mask,1) ~=1
                    if size(mask,2) == 1
                        mask = mask';
                    else
                        if strcmpi(data.limo.Analysis,'Time-Frequency')
                            mask = squeeze(mask(channel,freq,time,:));
                        else
                            mask = squeeze(mask(channel,:));
                        end
                    end
                    mask(mask~=0)=1; mask(mask==0)=NaN;
                end
            end

            if strcmpi(fig,'new')
                figure('Name','Central Tendency Estimate','color','w');
            end
            hold on

            % frame info
            % ----------
            if strcmpi(data.limo.Analysis,'Time')
                if isfield(data.limo.data,'timevect')
                    vect = data.limo.data.timevect;
                else
                    vect = data.limo.data.start:(1000/data.limo.data.sampling_rate):data.limo.data.end;  % in msec
                end
            elseif strcmpi(data.limo.Analysis,'Frequency')
                if isfield(data.limo.data,'freqlist')
                    vect = data.limo.data.freqlist;
                else
                    vect = linspace(data.limo.data.start,data.limo.data.end,size(Data,2));
                end
            elseif strcmpi(data.limo.Analysis,'Time-Frequency')
                if strcmpi(restrict,'time')
                    if isfield(data.limo.data,'tf_times')
                        vect = data.limo.data.tf_times;
                    else
                        vect = data.limo.data.start:(1000/data.limo.data.sampling_rate):data.limo.data.end;  % in msec
                    end
                elseif strcmpi(restrict,'frequency')
                    if isfield(data.limo.data,'tf_freqs')
                        vect = data.limo.data.tf_freqs;
                    else
                        vect = linspace(data.limo.data.lowf,data.limo.data.highf,size(Data,2));
                    end
                else
                    warning('x axis lable info missing');
                    vect = 1:size(Data,2);
                end
            elseif ~exist('vect','var')
                v = inputdlg('no axis info? enter x axis interval e.g. [0:0.5:200]');
                try
                    vect = eval(cell2mat(v));
                    if length(vect) ~= size(Data,2)
                        warning('interval invalid - using defaults');
                        vect = 1:size(Data,2);
                    end
                catch ME
                    warning(ME.identifier,'xaxis interval invalid:%s - using default',ME.message)
                    vect = 1:size(Data,2);
                end
            end
        end

        % finally plot
        % ---------------
        plotted_data.xvect = vect;
        if turn==1
            if subjects_plot == 1
                if length(vect) == length(Data)
                    plot(vect,Data,'LineWidth',2);
                else
                    plot(Data,'LineWidth',2);
                end
                plotted_data.data  = Data;
            else
                if length(vect) == length(Data(:,2)')
                    plot(vect,Data(:,2)','LineWidth',3);
                else
                    plot(Data(:,2)','LineWidth',3);
                end
                plotted_data.data  = Data';
            end
            assignin('base','plotted_data',plotted_data)
            colorOrder = get(gca, 'ColorOrder');
            colorindex = 1;
        else
            if subjects_plot == 1 && length(vect) ~= length(Data)
                warndlg('the new data selected have a different size, plot skipped')
            elseif subjects_plot == 0 && length(vect) ~= size(Data,1)
                warndlg('the new data selected have a different size, plot skipped')
            else
                if subjects_plot == 0
                    plot(vect,Data(:,2)','Color',colorOrder(colorindex,:),'LineWidth',3);
                    plotted_data.data  = Data';
                else
                    plot(vect,Data,'LineWidth',2);
                    plotted_data.data  = Data;
                end
                assignin('base','plotted_data',Data')
            end
        end

        if subjects_plot == 0 && size(vect,2) == size(Data,1)
            fillhandle = patch([vect fliplr(vect)], [Data(:,1)',fliplr(Data(:,3)')], colorOrder(colorindex,:));
            set(fillhandle,'EdgeColor',colorOrder(colorindex,:),'FaceAlpha',0.2,'EdgeAlpha',0.8);%set edge color
        end
        grid on; axis tight; box on;

        if ~isempty(restrict)
            xlabel(restrict,'FontSize',14)
        else
            xlabel(data.limo.Analysis,'FontSize',14)
        end
        ylabel('Amplitude','FontSize',14)

        if turn == 1
            newname = name{turn};
            newchannel = num2str(channel);
            mytitle = sprintf('channel %s \n %s',newchannel,name{1});
        else
            if ~strcmpi(name{turn-1},name{turn})
                newname = sprintf('%s and \n %s',newname,name{turn});
            end

            if ~strcmpi(newchannel,num2str(channel))
                newchannel = [newchannel ' ' num2str(channel)];
            end
            mytitle = sprintf('channel %s and \n %s',newchannel,newname);
        end
        title(mytitle,'Fontsize',16,'Interpreter','none');

        % updates
        turn = turn+1;
        if colorindex <7
            colorindex = colorindex + 1;
        else
            colorindex = 1;
        end
        clear data tmp
        pause(1);
    else % end of selection, Data is empty
        % finally add significant frames
        if ~isempty(mask) 
            h = axis; plot(vect,mask.*h(3),'r*','LineWidth',2)
        end
    end
end


